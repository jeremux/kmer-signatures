import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ArffLoader;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.bayes.NaiveBayes;
import weka.filters.unsupervised.attribute.StringToWordVector;

import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.util.Random;

/**
 * This example trains NaiveBayes incrementally on data obtained
 * from the ArffLoader.
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 */
public class IncrementalClassifier {

  /**
   * Expects an ARFF file as first argument (class attribute is assumed
   * to be the last attribute).
   *
   * @param args        the commandline arguments
   * @throws Exception  if something goes wrong
   */
  public static void main(String[] args) throws Exception {
    // load data
    ArffLoader loader = new ArffLoader();
    loader.setFile(new File("/home/jeremy/taxonomic-classification/create_db/Alveolata__33630/learn/learning_S50.arff"));
    Instances structure = loader.getStructure();
//    structure.setClassIndex(structure.numAttributes() - 1);
//
//    // train NaiveBayes
//    NaiveBayesUpdateable nb = new NaiveBayesUpdateable();
//    nb.buildClassifier(structure);
//    Instance current;
//    int cpt = 0;
//    while ((current = loader.getNextInstance(structure)) != null)
//    {
//    	System.out.println("cpt = "+cpt);
//      nb.updateClassifier(current);
//      cpt++;
//    }
//
//    System.out.println(nb);
    
	  Instances train = ...         // from somewhere
	  Instances test = ...          // from somewhere
	  // filter
	  Remove rm = new Remove();
	  rm.setAttributeIndices("1");  // remove 1st attribute
	  // classifier
	  J48 j48 = new J48();
	  j48.setUnpruned(true);        // using an unpruned J48
	  // meta-classifier
	  FilteredClassifier fc = new FilteredClassifier();
	  fc.setFilter(rm);
	  fc.setClassifier(j48);
	  // train and make predictions
	  fc.buildClassifier(train);
	  for (int i = 0; i < test.numInstances(); i++) {
	    double pred = fc.classifyInstance(test.instance(i));
	    System.out.print("ID: " + test.instance(i).value(0));
	    System.out.print(", actual: " + test.classAttribute().value((int) test.instance(i).classValue()));
	    System.out.println(", predicted: " + test.classAttribute().value((int) pred));
	  }

  }
}